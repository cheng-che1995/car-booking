openapi: 3.1.0
info:
  title: Car Booking
  version: 0.0.1
  description: This is a reservation server for shared vehicles.
  contact:  
    name: diverwil1995
    url: https://github.com/diverwil1995/car-booking
    email: diverwil1995@gmail.com
  license: 
    name: All rights reserved
    url: "#"
servers: 
  - url: http://localhost:1323

paths:
  "/login":
    post: 
      summary: Visitor login
      operationId: login
      security: 
        -  jwt_auth: []
      description: >
        This operation allows visitors to log into the system.
        It requires the user strcuture as input.
        If the operation is successful, it will return a success message.
      requestBody: 
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses: 
        '200':
          description: Login successful.
        '400':
          description: Bad request.
        '404':
          description: Invalid.
  "/users":
    post:
      summary: Register a new user
      operationId: createUser
      security:
        - jwt_auth: []
      description: > 
        This operation allows creating a new user in the system.
        It requires the user's name and password as input.
        If the operation is successful, it will return the user structure, including the UUID.
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User creation successful.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request.      
        '409':
          description: User already exists.
  "/booking/users":
    post: 
      summary: Search users by filter
      operationId: getUsers
      security: 
        -  jwt_auth: []
      description: >
        This operation allows searching for collection of users based on user's structure in the system.
        It requires the user's structure as input.
        If the operation is successful, it will return an array of users.
      requestBody: 
        content: 
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Users search successful.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/User"
        '400':
          description: Bad request.
        '404':
          description: User not found.
        
  "/booking/users/{uuid}":
    get:
      summary: Search user by UUID
      operationId: getUser
      description: >
        This operation allows searching for a user by UUID in the system.
        It requires the user's UUID as input.
        If the operation is successful, it will return the user structure.
      security: 
        - jwt_auth: []
      parameters: 
        - in: path
          name: uuid
          required: true
          schema: 
            type: string
      responses: 
        '200':
          description: User search successful.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request.
        '404':
          description: User not found.
    delete:
      summary: Delete user By UUID
      operationId: deleteUser
      security: 
        -  jwt_auth: []
      description: >
        This operation allows deleting a user By UUID from the system.
        It requires the user's UUID as input.
        If the operation is successful, it will return a success message.
      parameters: 
        - in: path
          name: uuid
          required: true
          schema: 
            type: string
      responses: 
        '200':
          description: User deleted Successfully.
        '400':
          description: Bad request.
        '404':
          description: User not found.
  "/booking/cars":
    post: 
      summary: Create a new car.
      operationId: createCar
      security: 
        -  jwt_auth: []
      description: >
        This operation allows create a new car info into the system.
        It requires the car structure as input.
        If the operation is successful, it will return a success message.
      requestBody: 
        content: 
          application.json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Car creation successful.
        '409':
          description: Car already exists.
               

        
components: 
  schemas:
    UserRequest:
      type: object
      required:
        - username
        - password
      properties: 
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties: 
        uuid:
          type: string
        username:
          type: string
        password:
          type: string
    Car:
      type: object
      properties:
        uuid:
          type: string
        user_uuid:
          type: string
        plate:
          type: string
  securitySchemes: 
    jwt_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
